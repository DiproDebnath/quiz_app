{"_type":"export","__export_format":4,"__export_date":"2022-10-30T12:57:47.316Z","__export_source":"insomnia.desktop.app:v2022.6.0","resources":[{"_id":"req_a2deef947c5f4e6f8c9afec4d5f3855f","parentId":"fld_cd69004bba4e45ccb1a73e28983f5e59","modified":1667134462371,"created":1667107493454,"url":"http://localhost:3000/users/create","name":"Create user","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"username\": \"dipro\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1662115420001.75,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_cd69004bba4e45ccb1a73e28983f5e59","parentId":"fld_0526ab24401c4d59baf54207cfc38402","modified":1667107353431,"created":1667107349178,"name":"user","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1667105990027,"_type":"request_group"},{"_id":"fld_0526ab24401c4d59baf54207cfc38402","parentId":"wrk_3f9dc049f40943b89075970ace03e4ad","modified":1667045095639,"created":1667045095639,"name":"Survey","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1667045095639,"_type":"request_group"},{"_id":"wrk_3f9dc049f40943b89075970ace03e4ad","parentId":null,"modified":1656400591391,"created":1656400591391,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_52bf101b122241948a17f6a66fe024a9","parentId":"fld_cd69004bba4e45ccb1a73e28983f5e59","modified":1667107844492,"created":1667107364388,"url":"http://localhost:3000/users/1","name":"get single user","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1662115419951.75,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3ee1ab667a1045d08ed7dab5c2312907","parentId":"fld_cd69004bba4e45ccb1a73e28983f5e59","modified":1667107457786,"created":1667107457786,"url":"http://localhost:3000/users","name":"get users","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1661293799150.375,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1c4d3d725a4e4840a9badee854ae8763","parentId":"fld_2a7ac4fbc8134f1f83e6f3556c34ea89","modified":1667134638331,"created":1667113081313,"url":"http://localhost:3000/survey/answer","name":"create user answer","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"user_id\": 1,\n\t\"question_id\": 17,\n\t\"answer_id\" : 3\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1667045144785,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_2a7ac4fbc8134f1f83e6f3556c34ea89","parentId":"fld_0526ab24401c4d59baf54207cfc38402","modified":1667112993221,"created":1667112988193,"name":"user survey","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1667105990002,"_type":"request_group"},{"_id":"req_014d0f91f6d34ec5bdefc82462ab125b","parentId":"fld_2a7ac4fbc8134f1f83e6f3556c34ea89","modified":1667134465837,"created":1667132916274,"url":"http://localhost:3000/survey/","name":"get survey result","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"user_id\": 1\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1667045144772.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_cbf81e7a7ce14fb4928c8956c24490f9","parentId":"fld_1bf70f25e27e43cebcffd612e8757132","modified":1667134467227,"created":1667056040886,"url":"http://localhost:3000/questions/create_with_answer","name":"Create question with answer","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"question\": \"what is the color of sky?\",\n\t\"answers\": [\n\t\t{\"answer\":\"red\", \"is_correct\": 0 },\n\t\t{\"answer\":\"white\", \"is_correct\": 0 },\n\t\t{\"answer\":\"blue\", \"is_correct\": 1 },\n\t\t{\"answer\":\"green\", \"is_correct\": 0 }\n\t]\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1667045144860,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_1bf70f25e27e43cebcffd612e8757132","parentId":"fld_0526ab24401c4d59baf54207cfc38402","modified":1667105989977,"created":1667105989977,"name":"question","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1667105989977,"_type":"request_group"},{"_id":"req_1aa5f59d37b948fcb594856ac7545fbc","parentId":"fld_1bf70f25e27e43cebcffd612e8757132","modified":1667134469358,"created":1667045144810,"url":"http://localhost:3000/questions/create","name":"Create question","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"question\": \"what is the color of sky?\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1667045144810,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_079207db56b549838499317d2370abdc","parentId":"fld_1bf70f25e27e43cebcffd612e8757132","modified":1667134486894,"created":1667055432056,"url":"http://localhost:3000/questions/10","name":"get single question","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1667045144760,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_df2c649334ba4fdfb90a52aa800ea272","parentId":"fld_1bf70f25e27e43cebcffd612e8757132","modified":1667134481935,"created":1667106007907,"url":"http://localhost:3000/questions","name":"get questions","description":"","method":"GET","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5ca6f2dc457847408e54162bb3573b87","disabled":false},{"id":"pair_738aae99fdc74916872edd257d393157","name":"Accept","value":"application/json","description":"","disabled":true},{"id":"pair_dc1843bffb114b5c900f70648da04659","name":"","value":"","description":""},{"id":"pair_b65c298425d247668c9bf14434de2409","name":"","value":"","description":""}],"authentication":{},"metaSortKey":-1663758661554.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_92537363847bbdeec42ca5fd54964d8e1b1f4455","parentId":"wrk_3f9dc049f40943b89075970ace03e4ad","modified":1656401238565,"created":1656400591400,"name":"Base Environment","data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}"},"dataPropertyOrder":{},"color":null,"isPrivate":false,"metaSortKey":1656400591400,"_type":"environment"},{"_id":"jar_92537363847bbdeec42ca5fd54964d8e1b1f4455","parentId":"wrk_3f9dc049f40943b89075970ace03e4ad","modified":1657828300882,"created":1656400591402,"name":"Default Jar","cookies":[{"key":"laravel_session","value":"eyJpdiI6InpibVVueFlEWjZhalhSYTc5WVlGNkE9PSIsInZhbHVlIjoiVDBjVldrTGg5czBsZ3NleTdobUhDd1czMnZDRlpWbGZ6SXZyU2hXQXYzTzcyKzZlMGFIWDRaUkN6QU1Eb2JkbkVTZkdQQUZGdzlYL0NLZTNoTmxFSFBHeTNHS2hXVmFqZFUvS2RvY0RsTUpZY3A1RFlub3RmdmYxbzh2eUthSVkiLCJtYWMiOiI0ZmZkZWI5NTBmY2VlYmRlYzgwYjdjZDRjZTkzZGEzZWMzNDI3ZjcxMzU3NGIyOWI2YjliNTI5NWYyNDJjNGQ5IiwidGFnIjoiIn0%3D","expires":"2022-07-14T21:51:40.000Z","maxAge":7200,"domain":"127.0.0.1","path":"/","httpOnly":true,"extensions":["samesite=lax"],"hostOnly":true,"creation":"2022-07-14T19:46:51.380Z","lastAccessed":"2022-07-14T19:51:40.881Z","id":"34188832277507086"}],"_type":"cookie_jar"},{"_id":"spc_9bcfb9f5297d4faeb521bc9946bb2da6","parentId":"wrk_3f9dc049f40943b89075970ace03e4ad","modified":1667045059047,"created":1656400591398,"fileName":"New Document","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_a7740b3ae60a455486f96d664dc08cb6","parentId":"wrk_3f9dc049f40943b89075970ace03e4ad","modified":1656400591404,"created":1656400591404,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_846b341610a64325a16c5183d1645ccd","parentId":"env_92537363847bbdeec42ca5fd54964d8e1b1f4455","modified":1657822473016,"created":1656401242816,"name":"laravel blog api","data":{"base_url":"http://127.0.0.1:8000","token":"tyLMG77KiVf5uYEUw7p9yuuu8MAWlCrL4t09IqNo79uhuHpQr8MToyQXiRV6aemQjdWWuM77dmVdLqGC"},"dataPropertyOrder":{"&":["base_url","token"]},"color":null,"isPrivate":false,"metaSortKey":1656401242816,"_type":"environment"},{"_id":"env_env_92537363847bbdeec42ca5fd54964d8e1b1f4455_sub","parentId":"env_92537363847bbdeec42ca5fd54964d8e1b1f4455","modified":1656401668781,"created":1656401668781,"name":"OpenAPI env","data":{"scheme":"https","base_path":"/v2","host":"petstore.swagger.io"},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1656401668781,"_type":"environment"}]}